/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */
package com.google.visualization.datasource.query.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KW_SELECT = 5;
  /** RegularExpression Id. */
  int KW_WHERE = 6;
  /** RegularExpression Id. */
  int KW_GROUP = 7;
  /** RegularExpression Id. */
  int KW_PIVOT = 8;
  /** RegularExpression Id. */
  int KW_ORDER = 9;
  /** RegularExpression Id. */
  int KW_BY = 10;
  /** RegularExpression Id. */
  int KW_LIMIT = 11;
  /** RegularExpression Id. */
  int KW_OFFSET = 12;
  /** RegularExpression Id. */
  int KW_LABEL = 13;
  /** RegularExpression Id. */
  int KW_FORMAT = 14;
  /** RegularExpression Id. */
  int KW_OPTIONS = 15;
  /** RegularExpression Id. */
  int KW_ASC = 16;
  /** RegularExpression Id. */
  int KW_DESC = 17;
  /** RegularExpression Id. */
  int KW_TRUE = 18;
  /** RegularExpression Id. */
  int KW_FALSE = 19;
  /** RegularExpression Id. */
  int KW_AND = 20;
  /** RegularExpression Id. */
  int KW_OR = 21;
  /** RegularExpression Id. */
  int KW_NOT = 22;
  /** RegularExpression Id. */
  int KW_DATE = 23;
  /** RegularExpression Id. */
  int KW_TIMEOFDAY = 24;
  /** RegularExpression Id. */
  int KW_DATETIME = 25;
  /** RegularExpression Id. */
  int KW_TIMESTAMP = 26;
  /** RegularExpression Id. */
  int KW_MIN = 27;
  /** RegularExpression Id. */
  int KW_MAX = 28;
  /** RegularExpression Id. */
  int KW_AVG = 29;
  /** RegularExpression Id. */
  int KW_COUNT = 30;
  /** RegularExpression Id. */
  int KW_SUM = 31;
  /** RegularExpression Id. */
  int KW_NO_VALUES = 32;
  /** RegularExpression Id. */
  int KW_NO_FORMAT = 33;
  /** RegularExpression Id. */
  int KW_IS = 34;
  /** RegularExpression Id. */
  int KW_NULL = 35;
  /** RegularExpression Id. */
  int KW_YEAR = 36;
  /** RegularExpression Id. */
  int KW_MONTH = 37;
  /** RegularExpression Id. */
  int KW_DAY = 38;
  /** RegularExpression Id. */
  int KW_HOUR = 39;
  /** RegularExpression Id. */
  int KW_MINUTE = 40;
  /** RegularExpression Id. */
  int KW_SECOND = 41;
  /** RegularExpression Id. */
  int KW_MILLISECOND = 42;
  /** RegularExpression Id. */
  int KW_WITH = 43;
  /** RegularExpression Id. */
  int KW_CONTAINS = 44;
  /** RegularExpression Id. */
  int KW_STARTS = 45;
  /** RegularExpression Id. */
  int KW_ENDS = 46;
  /** RegularExpression Id. */
  int KW_MATCHES = 47;
  /** RegularExpression Id. */
  int KW_LIKE = 48;
  /** RegularExpression Id. */
  int KW_NOW = 49;
  /** RegularExpression Id. */
  int KW_DATEDIFF = 50;
  /** RegularExpression Id. */
  int KW_QUARTER = 51;
  /** RegularExpression Id. */
  int KW_LOWER = 52;
  /** RegularExpression Id. */
  int KW_UPPER = 53;
  /** RegularExpression Id. */
  int KW_DAYOFWEEK = 54;
  /** RegularExpression Id. */
  int KW_TODATE = 55;
  /** RegularExpression Id. */
  int ID = 56;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 57;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 58;
  /** RegularExpression Id. */
  int ALPHANUMERIC = 59;
  /** RegularExpression Id. */
  int DIGIT = 60;
  /** RegularExpression Id. */
  int LETTER_OR_UNDERSCORE = 61;
  /** RegularExpression Id. */
  int STRING_LITERAL = 62;
  /** RegularExpression Id. */
  int QUOTED_ID = 63;
  /** RegularExpression Id. */
  int OP_COMMA = 64;
  /** RegularExpression Id. */
  int OP_LPAREN = 65;
  /** RegularExpression Id. */
  int OP_RPAREN = 66;
  /** RegularExpression Id. */
  int OP_EQUALS = 67;
  /** RegularExpression Id. */
  int OP_NOT_EQUALS = 68;
  /** RegularExpression Id. */
  int OP_LESS_THAN = 69;
  /** RegularExpression Id. */
  int OP_LESS_OR_EQUAL = 70;
  /** RegularExpression Id. */
  int OP_GREATER_THAN = 71;
  /** RegularExpression Id. */
  int OP_GREATER_OR_EQUAL = 72;
  /** RegularExpression Id. */
  int OP_ASTERISK = 73;
  /** RegularExpression Id. */
  int OP_PLUS = 74;
  /** RegularExpression Id. */
  int OP_MINUS = 75;
  /** RegularExpression Id. */
  int OP_SLASH = 76;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 77;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"select\"",
    "\"where\"",
    "\"group\"",
    "\"pivot\"",
    "\"order\"",
    "\"by\"",
    "\"limit\"",
    "\"offset\"",
    "\"label\"",
    "\"format\"",
    "\"options\"",
    "\"asc\"",
    "\"desc\"",
    "\"true\"",
    "\"false\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"date\"",
    "\"timeofday\"",
    "\"datetime\"",
    "\"timestamp\"",
    "\"min\"",
    "\"max\"",
    "\"avg\"",
    "\"count\"",
    "\"sum\"",
    "\"no_values\"",
    "\"no_format\"",
    "\"is\"",
    "\"null\"",
    "\"year\"",
    "\"month\"",
    "\"day\"",
    "\"hour\"",
    "\"minute\"",
    "\"second\"",
    "\"millisecond\"",
    "\"with\"",
    "\"contains\"",
    "\"starts\"",
    "\"ends\"",
    "\"matches\"",
    "\"like\"",
    "\"now\"",
    "\"dateDiff\"",
    "\"quarter\"",
    "\"lower\"",
    "\"upper\"",
    "\"dayOfWeek\"",
    "\"toDate\"",
    "<ID>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<ALPHANUMERIC>",
    "<DIGIT>",
    "<LETTER_OR_UNDERSCORE>",
    "<STRING_LITERAL>",
    "<QUOTED_ID>",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "<OP_NOT_EQUALS>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"*\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "<UNEXPECTED_CHAR>",
  };

}
